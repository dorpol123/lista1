import kotlin.test.assertFailsWith

/**
 * Funkcja collatz do generowania ciągu Collatza
 * @param n liczba naturalna dla której generowany jest ciąg Collatza
 * @return list elementy ciągu Collatza
 */

fun collatz(liczba: Int): List<Int> {
    require(liczba > 0) { "Pierwsza wartość musi być większa od zera" }
    val lista = mutableListOf<Int>()
    lista.add(liczba)

    var dana = liczba
    while (dana != 1) {
        if (dana % 2 == 0) {
            dana = parzyste(dana)
        } else {
            dana = nieparzyste(dana)
        }
        lista.add(dana)
    }
    return lista
}

/**
 * Funkcja parzyste do dzielenia liczb parzystych przez 2
 * @param n liczba parzysta
 * @return połowa wartości liczby parzystej (n)
 */
fun parzyste(n: Int) : Int{
    return n / 2
}

/**
 * Funkcja nieparzyste dla liczb nieparzystych, która mnoży wprowadzoną liczbę przez 3 i dodaje 1
 * @param n liczba nieparzysta
 * @return nowa liczba parzysta, wynik mnożenia n przez 3 i dodania 1
 */
fun nieparzyste(n: Int) : Int{
    return 3 * n + 1
}

/**
 * Funkcja Max wyszukująca największy element w tablicy
 * @param lista elementów
 * @return maxE największy element listy
 */
fun Max(lista: List<Int>): Int {
    var maxE = lista[0]
    lista.forEach { element ->
        maxE = maxOf(maxE, element)
    }
    return maxE
}

/**
 * Funkcja dlugosc wyszukująca największy element w tablicy
 * @param lista elementów
 * @return maxE największy element listy
 */
fun dlugosc(lista:  List<Int>): Pair<Int, List<Int>> {
    val lip = mutableListOf<Int>()
    var licznik = 0

    for (i in lista) {
        if (i == 4) {
            break
        }
        lip.add(i)
        licznik++
    }
    return Pair(licznik, lip)  // Zwracamy liczbę elementów i listę
}
/**
 * Funkcja testująca działanie funkci
 */

fun testcollatz() {
    val test1 = collatz(1)
    require(test1 == listOf(1)) { "Zła wartość elementu ciągu Collatza" }

    assertFailsWith<IllegalArgumentException> {collatz(0)}

    val test3 = collatz(3)
    require(test3 == listOf(3, 10, 5, 16, 8, 4, 2, 1)) {"Nieprawidłowe elementy ciągu Collatza"}

    val test4 = parzyste(4)
    require(test4 == 2) { "Nieprawidłowa wartość liczby parzystej"}

    val test5 = nieparzyste(3)
    require(test5 == 10) { "Nieprawidłowa wartość liczby nieparzystej"}

    val test6 = Max(listOf(-1, -6, 5, 16, 0))
    require(test6 == 16) { "Nieprawidłowa wartość maksymalna ciągu Collatza"}

    val test7 = dlugosc(listOf(3, 10, 5, 16, 8, 4, 2, 1))
    require(test7.second == listOf(3, 10, 5, 16, 8)) { "Nieprawidłowe elementy przd 4, 2, 1" }

    val test8 = dlugosc(listOf(3, 10, 5, 16, 8, 4, 2, 1))
    require(test8.first == 5) { "Nieprawidłowa wartość długości ciągu Collatza" }
}

fun main() {
    testcollatz()
}
